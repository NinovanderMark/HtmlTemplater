<page title="Overview">
	<section>
		<h1>HTML Templater</h1>
		<p>HTML Templater is a static site generator where the templates and content are all straightforward HTML. The user can define custom elements, or redefine existing HTML elements with custom HTML to be used as page templates, or reusable components.</p>
		<p>The element definitions and their use are all in bog-standard HTML, meaning that developers don't have to learn any other markup language, and that it's flexible enough to do anything that the web can do, both now and in the future.</p>
		<p>The code for this project can be found on <a href="https://github.com/NinovanderMark/HtmlTemplater">GitHub</a>.</p>
	</section>
	
	<section>
		<h2>Getting started</h2>
		<p>To get started with HTML Templater, simply create 2 folders one for the source files, and another where the website will be generated into. Within the source folder, create a folder structure as follows.</p>
		<ul class='filestructure'>
			<li>assets</li>
			<li>elements</li>
			<li>pages</li>
			<li class='file'>manifest.json</li>
		</ul>
		
		<h3>Manifest file</h3>
		<p>The starting point for site generation with HTML Templater is the manifest file, which enumerates the custom elements defined for our website, the location where the website will be generated, and how to handle assets.</p>
		<p>The following JSON will is enough to get started, where the <code>outputPath</code> indicates the folder where the website should be generated.</p>
				<pre class="codeblock">
{
  "elements": [
    "page"
  ],
  "outputPath": "../wwwroot",
  "assets": {
    "input": "assets",
    "output": "assets"
  }
}</pre>

		<h3>Pages</h3>
		<p>HTML Templater will iterate over each <code>htmt</code> file in the <code>pages</code> subfolder and generate a corresponding html page in the output folder. For now, let's start with a single page called <code>index.htmt</code> and give it the following contents.</p>
				<pre class="codeblock">
&lt;page&gt;
  &lt;h1&gt;Hello World&lt;/h1&gt;
&lt;/page&gt;</pre>

		<h3>Elements</h3>
		<p>Each HTML element can be redefined in an element file. This can be used to create reusable building blocks, like page templates. To see this in action, create a <code>page.htmt</code> file in the <code>elements</code> subfolder, and add the following code to it.
				<pre class="codeblock">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;main&gt;{{ InnerHtml }}&lt;/main&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>

		<h3>Site generation</h3>
		<p>Now when HTML Templater is ran, with the path to the <code>manifest.json</code> file as an argument, it will generate a single html page, where the <code>page</code> element has been replaced by its definition from the element file.</p>
		<p>This relatively basic setup can now easily be extended with additional pages, different custom elements and any choice of static assets. For more detailed information, visit the <a href="/reference.html">reference</a> page.
	</section>
	
	<section>
		<h2>About the author</h2>
		<p>My name is Nino van der Mark, I'm a software developer at 4Dotnet and I like building things that make life a little more fun, and a little bit easier. Feel free to check out my other projects on <a href="https://github.com/NinovanderMark">GitHub</a> or my <a href="https://www.ninovandermark.nl">personal website</a>.</p>
	</section>
</page>