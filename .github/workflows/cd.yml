# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Continuous Deployment

on:
  push:
    branches: [ "main" ]

defaults:
  run:
    shell: bash
    working-directory: ./src

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: 
      app-version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Deploy website
      run: dotnet run --no-restore --project HtmlTemplater.CLI -- ../htmt/manifest.json
    - name: Get application version
      id: version
      run: |
        csproj=`cat ./HtmlTemplater.CLI/HtmlTemplater.CLI.csproj`
        version=$(grep -oPm1 "(?<=<Version>)[^<]+" <<< "$csproj")
        echo "version=v$version" >> "$GITHUB_OUTPUT"

  # Updates the documentation website
  deploy-website:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Deploy website
        run: dotnet run --project HtmlTemplater.CLI -- ../htmt/manifest.json
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '../docs/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Uses the application version to check if a release already exists for it
  check-release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      exists: ${{ steps.check-release.outputs.exists }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Output version
      env: 
        APPVERSION: ${{needs.build.outputs.app-version}}
      run: echo "$APPVERSION"
    - name: Check if release already exists
      uses: mukunku/tag-exists-action@v1.6.0
      id: check-release
      with: 
        tag: ${{needs.build.outputs.app-version}}

# Creates a new release for the new application version
  create-release:
    runs-on: ubuntu-latest
    needs: [ build, check-release ]
    if: needs.check-release.outputs.exists == 'false'
    steps:
    - uses: actions/checkout@v4
    - name: Tag new release
      env: 
        TAG: ${{needs.build.outputs.app-version}}
      run: |
        git config user.email "ninovdmark@gmail.com"
        git config user.name "GitHub Actions Workflow"
        git tag $TAG
        git push origin --tags
    - name: Create new release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{needs.build.outputs.app-version}}
      run: |
        gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
            --generate-notes
  
  build-attach-binaries-linux:
    runs-on: ubuntu-latest
    needs: [ build, create-release ]
    strategy:
      matrix: 
        target: [ linux-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        zip -r ../../../../../$target.zip *
    - name: Upload release artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{needs.build.outputs.app-version}}
        target: ${{ matrix.target }}
      run: |
        gh release upload "$tag" \
            $target.zip

  build-attach-binaries-windows:
    runs-on: windows-latest
    needs: [ build, create-release ]
    strategy:
      matrix: 
        target: [ win-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        tar -czvf ../../../../../$target.zip .
    - name: Upload release artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{needs.build.outputs.app-version}}
        target: ${{ matrix.target }}
      run: |
        gh release upload "$tag" \
            $target.zip

  build-attach-binaries-osx:
    runs-on: macos-latest
    needs: [ build, create-release ]
    strategy:
      matrix: 
        target: [ osx-arm64, osx-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        zip -r ../../../../../$target.zip *
    - name: Upload release artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{needs.build.outputs.app-version}}
        target: ${{ matrix.target }}
      run: |
        gh release upload "$tag" \
            $target.zip