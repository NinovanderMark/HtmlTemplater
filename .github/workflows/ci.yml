# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Continuous Integration

on:
  pull_request:
    branches: [ "main" ]

defaults:
  run:
    shell: bash
    working-directory: ./src

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: 
      app-version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Deploy website
      run: dotnet run --no-restore --project HtmlTemplater.CLI -- ../htmt/manifest.json
    - name: Report summary
      run: |
          echo "# Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Project built and tests run successfully" >> $GITHUB_STEP_SUMMARY
    - name: Get application version
      id: version
      run: |
        csproj=`cat ./HtmlTemplater.CLI/HtmlTemplater.CLI.csproj`
        version=$(grep -oPm1 "(?<=<Version>)[^<]+" <<< "$csproj")
        echo "version=v$version" >> "$GITHUB_OUTPUT"

  # Uses the application version to check if a release already exists for it
  check-release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      exists: ${{ steps.check-release.outputs.exists }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Output version
      env: 
        APPVERSION: ${{needs.build.outputs.app-version}}
      run: echo "$APPVERSION"
    - name: Check if release already exists
      uses: mukunku/tag-exists-action@v1.6.0
      id: check-release
      with: 
        tag: ${{needs.build.outputs.app-version}}

  # Output new release version
  create-release:
    runs-on: ubuntu-latest
    needs: [ build, check-release ]
    if: needs.check-release.outputs.exists == 'false'
    steps:
    - name: Display release version
      env: 
        TAG: ${{needs.build.outputs.app-version}}
      run: echo "New version number specified \`TAG\`" >> $GITHUB_STEP_SUMMARY

  # Tests release creation if a new release needs to be made
  build-binaries-linux:
    runs-on: ubuntu-latest
    needs: [ create-release ]
    if: needs.check-release.outputs.exists == 'false'
    strategy:
      matrix: 
        target: [ linux-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        zip -r ../../../../../$target.zip *

  build-binaries-windows:
    runs-on: windows-latest
    needs: [ create-release ]
    if: needs.check-release.outputs.exists == 'false'
    strategy:
      matrix: 
        target: [ win-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        tar -acvf ../../../../../$target.zip *

  build-binaries-osx:
    runs-on: macos-latest
    needs: [ create-release ]
    if: needs.check-release.outputs.exists == 'false'
    strategy:
      matrix: 
        target: [ osx-arm64, osx-x64 ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Publish application for target
      env:
        target: ${{ matrix.target }}
      run: dotnet publish -p:PublishProfile=$target
    - name: Create archive with binaries
      env:
        target: ${{ matrix.target }}
      run: |
        cd HtmlTemplater.CLI/bin/Release/publish/$target
        zip -r ../../../../../$target.zip *
